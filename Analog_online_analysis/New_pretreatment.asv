%% 离线预处理（使用在线相同的预处理流程）
clear; clc;

%% 添加必要路径
addpath('E:\桌面\BCI_Project\EEG_Data\Raw_data\fangfang')
addpath('D:\Neuro\neuracle-eegfile-reader-master')

%% 导入bdf数据
[filename, pathname] = uigetfile({'*.bdf';'*.*'}, '请选择需要转换的文件','MultiSelect', 'on');
disp('Importing data...');
try
    EEG = readbdfdata(filename, pathname);
catch Exception
    if strcmp(Exception.identifier, 'MATLAB:UndefinedFunction')
        error('请确认EEGLAB路径已添加到MATLAB中');
    end
end
disp('Import finished.');

%% 注意：这里不调用pop_resample！保持原始数据采样率1000Hz
% 如果注释掉或删除下面这行代码，则原始采样率为1000Hz
% EEG = pop_resample(EEG, 250);

%% 事件提取：以事件 '5' 为标记，提取0~10秒的epoch
EEG = pop_epoch(EEG, {'5'}, [0 10]);

%% 根据事件标签和用户选择的通道进行数据切割
% EEG.data 为：通道 x 采样点 x trial
EEG_S = EEG_splice(EEG.data, EEG.event);
EEG.data = EEG_S.data;
EEG.labels = EEG_S.labels';

%% 离线预处理（采用在线预处理的方式）
% 预先设计在线使用的滤波器
resampleFilter = designfilt('lowpassfir', ...
    'PassbandFrequency',125, 'StopbandFrequency',150, ...
    'SampleRate',1000, 'DesignMethod','kaiserwin');
bpFilter = designfilt('bandpassiir', ...
    'FilterOrder',4, 'HalfPowerFrequency1',8, ...
    'HalfPowerFrequency2',40, 'SampleRate',250);
notchFilter = designfilt('bandstopiir', ...
    'FilterOrder',4, 'HalfPowerFrequency1',49, ...
    'HalfPowerFrequency2',51, 'SampleRate',250);

[nchan, pnts, ntrials] = size(EEG.data);
pnts_down = floor(pnts/4);  % 降采样后采样点数（1000Hz→250Hz）

% 预分配处理后数据数组（尺寸：通道 x 降采样后采样点 x trial）
data_processed = zeros(nchan, pnts_down, ntrials);

for i = 1:ntrials
    % 取出当前 trial 数据（尺寸：通道 x 采样点，原始采样率为1000Hz）
    trial_data = double(EEG.data(:,:,i));
    
    % 1. 降采样：先用预设计低通滤波器进行双向滤波，再取每4个采样点（1000Hz→250Hz）
    trial_data = filtfilt(resampleFilter, trial_data')';
    trial_data = trial_data(:, 1:4:end);
    
    % 2. 带通滤波（8–40 Hz），注意此时采样率已为250Hz
    trial_data = filtfilt(bpFilter, trial_data')';
    
    % 3. 陷波滤波（50 Hz）
    trial_data = filtfilt(notchFilter, trial_data')';
    
    % 4. 平均参考（减去每个采样点所有通道的均值）
    trial_data = trial_data - mean(trial_data, 1);
    
    % 5. 基线校正：取最后1秒（250个采样点）的均值作为基线
    baseline_start = max(1, size(trial_data,2) - 250 + 1);
    baseline = mean(trial_data(:, baseline_start:end), 2);
    trial_data = trial_data - baseline;
    
    data_processed(:,:,i) = trial_data;
end

% 更新EEG结构体信息：采样率更新为250Hz，数据点数为 pnts_down
EEG.srate = 250;
EEG.pnts  = pnts_down;
EEG.trials = ntrials;

%% 提取MI时段（例如：从2秒到6秒）
% 现在数据采样率为250Hz，10秒epoch对应 10*250=2500 个采样点
start_time = 2;  % MI开始时间（秒）
end_time   = 6;  % MI结束时间（秒）
start_sample = round(start_time * EEG.srate);  % 2*250 = 500
end_sample   = round(end_time * EEG.srate);      % 6*250 = 1500

data_MI = data_processed(:, (start_sample+1):end_sample, :);
% 转换为【采样点 x 通道 x trial】格式
data_transformed = permute(data_MI, [2, 1, 3]);

% 转换为double型
data = double(data_transformed);
sampleRate = EEG.srate;
labels = EEG.labels;

%% 保存处理结果
matFileName = 'CQQ_newpre_train01.mat';  
filePath = 'E:\桌面\BCI_Project\EEG_Data\pre_for_mat_data\CQQ\new';  
matFilePath = fullfile(filePath, matFileName);
save(matFilePath, 'data', 'sampleRate', 'labels');
disp(['数据已成功保存为: ', matFilePath]);

%% 自定义函数：EEG_splice
function [EEG_S, indx] = EEG_splice(EEG_DATA, EEG_EVENT)
    % 通道选择对话框（列表可根据需要调整）
    list = {'Fpz', 'Fp1', 'Fp2', 'AF3', 'AF4', 'AF7', 'AF8', 'Fz', 'F1', ...
            'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'FCz', 'FC1', ...
            'FC2', 'FC3', 'FC4', 'FC5', 'FC6', 'FT7', 'FT8', 'Cz', ...
            'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'T7', 'T8', 'CP1', ...
            'CP2', 'CP3', 'CP4', 'CP5', 'CP6', 'TP7', 'TP8', 'Pz', ...
            'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'POz', 'PO3', 'PO4', ...
            'PO5', 'PO6', 'PO7', 'PO8', 'Oz', 'O1', 'O2', 'ECG', ...
            'HEOR', 'HEOL', 'VEOU', 'VEOL'};
    [indx, tf] = listdlg('PromptString', {'请选择需要提取的通道', ...
        '按住shift区域多选', 'ctrl单个多选'}, 'ListString', list);
    if ~tf
        error('未选择通道，操作已取消。');
    end

    % 参数定义：每个epoch持续10秒（已通过pop_epoch提取）
    target_duration_seconds = 10;  
    srate = 1000;  % 注意：这里数据原始采样率为1000Hz
    duration = target_duration_seconds * srate; 
    EEG_MI = [];
    EEG_labels = [];
    EEG_DATA_FIRST = [];  % 用于存储第一次提取的数据

    % 遍历所有事件，提取事件类型为 '5' 对应的epoch
    for i = 1:length(EEG_EVENT)
        if EEG_EVENT(i).type == '5'
            index_start = EEG_EVENT(i).latency;
            index_end = EEG_EVENT(i).latency + duration - 1;
            if isempty(EEG_MI)
                if ~isempty(EEG_DATA_FIRST)
                    EEG_MI = cat(3, EEG_DATA_FIRST, EEG_DATA(indx, index_start:index_end));
                else
                    EEG_DATA_FIRST = EEG_DATA(indx, index_start:index_end);
                end
            else
                EEG_MI(:, :, end+1) = EEG_DATA(indx, index_start:index_end); 
            end
            % 如果下一个事件存在，将其type转换为数字作为标签
            if i+1 <= length(EEG_EVENT)
                next_event_type = EEG_EVENT(i+1).type;
                EEG_labels(end + 1) = str2double(next_event_type);
            end
        end
    end

    EEG_S = struct();
    EEG_S.data = EEG_MI;
    EEG_S.labels = EEG_labels;
    EEG_S.srate = srate;
end
